
-- Basic Aggregate Functions: --

-- Q1 -- Retrieve the total number of rentals made in the Sakila database.
-- Hint: Use the COUNT() function.

SELECT COUNT(*) AS total_rentals FROM rental;

-- Q2 -- Find the average rental duration (in days) of movies rented from the Sakila database.
-- Hint: Utilize the AVG() function.
SELECT AVG(DATEDIFF(return_date, rental_date)) AS avg_rental_duration FROM rental;

-- String Functions: --

-- Q3 -- Display the first name and last name of customers in uppercase.
-- Hint: Use the UPPER () function.
SELECT UPPER(first_name) AS upper_first_name, UPPER(last_name) AS upper_last_name FROM customer;

-- Q4 -- Extract the month from the rental date and display it alongside the rental ID.
-- Hint: Employ the MONTH() function.
SELECT rental_id, MONTH(rental_date) AS rental_month FROM rental;


-- GROUP BY: --
-- Q5 -- Retrieve the count of rentals for each customer (display customer ID and the count of rentals).
-- Hint: Use COUNT () in conjunction with GROUP BY.
SELECT customer_id, COUNT(*) AS rental_count FROM rental GROUP BY customer_id;

-- Q6 -- Find the total revenue generated by each store.
 -- Hint: Combine SUM() and GROUP BY.


-- Joins:

-- Q7 -- Display the title of the movie, customer s first name, and last name who rented it.
-- Hint: Use JOIN between the film, inventory, rental, and customer tables.
SELECT f.title AS movie_title, c.first_name, c.last_name
FROM film f
JOIN inventory i ON f.film_id = i.film_id
JOIN rental r ON i.inventory_id = r.inventory_id
JOIN customer c ON r.customer_id = c.customer_id;

-- Q8. -- Retrieve the names of all actors who have appeared in the film "Gone with the Wind."
 -- Hint: Use JOIN between the film actor, film, and actor tables.
SELECT a.actor_id, a.first_name, a.last_name
FROM actor a
JOIN film_actor fa ON a.actor_id = fa.actor_id
JOIN film f ON fa.film_id = f.film_id
WHERE f.title = 'Gone with the Wind';

-- second method do this question Q8.

SELECT *
FROM film
WHERE title = 'Gone with the Wind';
SELECT *
FROM film_actor
WHERE film_id = (SELECT film_id FROM film WHERE title = 'Gone with the Wind');
SELECT a.actor_id, a.first_name, a.last_name
FROM actor a
JOIN film_actor fa ON a.actor_id = fa.actor_id
JOIN film f ON fa.film_id = f.film_id
WHERE f.title = 'Gone with the Wind';

--  Group by 

-- Q1. Determine the total number of rentals for each category of movies.
-- Hint: JOIN film_category, film, and rental tables, then use cOUNT () and GROUP BY.

SELECT fc.category_id, c.name AS category_name, COUNT(*) AS rental_count
FROM rental r
JOIN inventory i ON r.inventory_id = i.inventory_id
JOIN film f ON i.film_id = f.film_id
JOIN film_category fc ON f.film_id = fc.film_id
JOIN category c ON fc.category_id = c.category_id
GROUP BY fc.category_id, c.name
ORDER BY rental_count DESC;

-- Q.2. Find the average rental rate of movies in each language.
-- Hint: JOIN film and language tables, then use AVG () and GROUP BY.
select * from film;

SELECT l.name AS language_name, AVG(f.rental_rate) AS average_rental_rate
FROM film f
JOIN language l ON f.language_id = l.language_id
GROUP BY l.name
ORDER BY average_rental_rate DESC;

-- Joins:


-- Q3 -- Retrieve the customer names along with the total amount they've spent on rentals.
-- Hint: JOIN customer, payment, and rental tables, then use SUM() and GROUP BY.
SELECT c.customer_id, c.first_name, c.last_name, SUM(p.amount) AS total_amount_spent FROM customer c JOIN payment p ON c.customer_id = p.customer_id JOIN rental r ON p.rental_id = r.rental_id GROUP BY c.customer_id, c.first_name, c.last_name;

-- Q4 -- List the titles of movies rented by each customer in a particular city (e.g., 'London').
-- Hint: JOIN customer, address, city, rental, inventory, and film tables, then use GROUP BY.

SELECT c.customer_id, c.first_name, c.last_name, f.title AS movie_title FROM customer c JOIN address a ON c.address_id = a.address_id JOIN city ci ON a.city_id = ci.city_id JOIN rental r ON c.customer_id = r.customer_id JOIN inventory i ON r.inventory_id = i.inventory_id JOIN film f ON i.film_id = f.film_id WHERE ci.city = 'London' ORDER BY c.customer_id, f.title;

-- Advanced Joins and GROUP BY:

-- Q5 -- Display the top 5 rented movies along with the number of times they've been rented.
-- Hint: JOIN film, inventory, and rental tables, then use cOUNT() and GROUP BY, and limit the results.
SELECT f.film_id, f.title AS movie_title, COUNT(*) AS rental_count
FROM film f
JOIN inventory i ON f.film_id = i.film_id
JOIN rental r ON i.inventory_id = r.inventory_id
GROUP BY f.film_id, f.title
ORDER BY rental_count DESC
LIMIT 5;


-- Q6 -- Determine the customers who have rented movies from both stores (store ID 1 and store ID 2).
-- Hint: Use JOINS with rental, inventory, and customer tables and consider COUNT() and GROUP BY.

SELECT c.customer_id, c.first_name, c.last_name
FROM customer c
JOIN rental r ON c.customer_id = r.customer_id
JOIN inventory i ON r.inventory_id = i.inventory_id
WHERE i.store_id IN (1, 2)  -- Filter for rentals from store 1 or store 2
GROUP BY c.customer_id, c.first_name, c.last_name
HAVING COUNT(DISTINCT i.store_id) = 2;